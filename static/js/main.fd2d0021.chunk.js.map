{"version":3,"sources":["components/Form.js","components/Appointment.js","App.js","serviceWorker.js","index.js"],"names":["Form","createAppointment","useState","pet","owner","date","time","symptoms","appointment","setAppointment","error","setError","handleChange","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Appointment","deleteAppointment","onClick","App","initialAppointments","JSON","parse","localStorage","getItem","appointments","setAppointments","useEffect","setItem","stringify","newAppointments","filter","title","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fd2d0021.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Form = ({ createAppointment }) => {\r\n  //Crear state de citas\r\n  const [appointment, setAppointment] = useState({\r\n    pet: \"\",\r\n    owner: \"\",\r\n    date: \"\",\r\n    time: \"\",\r\n    symptoms: \"\"\r\n  });\r\n\r\n  //State para el error\r\n  const [error, setError] = useState(false);\r\n\r\n  //Funcion que se ejecuta cuando el usuario escribe en un input\r\n  const handleChange = e => {\r\n    //Funcion con el objeto para llenar el state\r\n    setAppointment({\r\n      //Tomamos una copia del state\r\n      ...appointment,\r\n      //Escribimos en el campo seleccionado\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  //Destructuring del state (objeto)\r\n  const { pet, owner, date, time, symptoms } = appointment;\r\n\r\n  //Cuando el usuario envia el formaulario\r\n  const appointmentSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    //Validar\r\n    if (\r\n      pet.trim() === \"\" ||\r\n      owner.trim() === \"\" ||\r\n      time.trim() === \"\" ||\r\n      date.trim() === \"\" ||\r\n      symptoms.trim() === \"\"\r\n    ) {\r\n      setError(true);\r\n      return;\r\n    }\r\n    //Ocultar el mensaje de error\r\n    setError(false);\r\n\r\n    //Crear la cita\r\n    appointment.id = uuidv4(); //Asignando un id\r\n    createAppointment(appointment);\r\n\r\n    //Reiniciar formulario\r\n    setAppointment({\r\n      pet: \"\",\r\n      owner: \"\",\r\n      date: \"\",\r\n      time: \"\",\r\n      symptoms: \"\"\r\n    });\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <h2>Crear Cita</h2>\r\n      {error ? (\r\n        <p className=\"alerta-error\">Todos los campos son obligatorios</p>\r\n      ) : null}\r\n      <form onSubmit={appointmentSubmit}>\r\n        <label>Nombre Mascota</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"pet\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre de la mascota\"\r\n          onChange={handleChange}\r\n          value={pet}\r\n        />\r\n        <label>Nombre del Dueño</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"owner\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre del dueño\"\r\n          onChange={handleChange}\r\n          value={owner}\r\n        />\r\n        <label>Fecha</label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"date\"\r\n          className=\"u-full-width\"\r\n          onChange={handleChange}\r\n          value={date}\r\n        />\r\n        <label>Hora</label>\r\n        <input\r\n          type=\"time\"\r\n          name=\"time\"\r\n          className=\"u-full-width\"\r\n          onChange={handleChange}\r\n          value={time}\r\n        />\r\n        <label>Síntomas</label>\r\n        <textarea\r\n          className=\"u-full-width\"\r\n          name=\"symptoms\"\r\n          onChange={handleChange}\r\n          value={symptoms}\r\n        ></textarea>\r\n\r\n        <button type=\"submit\" className=\"u-full-width button-primary\">\r\n          Agregar Cita\r\n        </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nForm.propTypes= {\r\n    createAppointment: PropTypes.func.isRequired\r\n}\r\nexport default Form;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Appointment = ( { appointment, deleteAppointment } ) => ( \r\n    <div className=\"cita\">\r\n        <p>Mascota: <span>{appointment.pet}</span></p>\r\n        <p>Dueño: <span>{appointment.owner}</span></p>\r\n        <p>Fecha: <span>{appointment.date}</span></p>\r\n        <p>Hora: <span>{appointment.time}</span></p>\r\n        <p>Síntomas: <span>{appointment.symptoms}</span></p>\r\n        <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick={() => deleteAppointment(appointment.id)}\r\n        >Eliminar &times;</button>\r\n    </div>\r\n );\r\n\r\n Appointment.propTypes = {\r\n     appointment: PropTypes.object.isRequired,\r\n     deleteAppointment: PropTypes.func.isRequired\r\n }\r\n \r\nexport default Appointment;","import React, { Fragment, useState, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport Appointment from \"./components/Appointment\";\nfunction App() {\n  //Citas en localStorage\n  let initialAppointments = JSON.parse(localStorage.getItem(\"appointments\"));\n  if (!initialAppointments) {\n    initialAppointments = [];\n  }\n\n  //Arreglo de citas\n  const [appointments, setAppointments] = useState(initialAppointments);\n\n  //useEffect para cuando el state cambie\n  useEffect(() => {\n    let initialAppointments = JSON.parse(localStorage.getItem(\"appointments\"));\n    if (initialAppointments) {\n      localStorage.setItem(\"appointments\", JSON.stringify(appointments));\n    } else {\n      localStorage.setItem(\"appointments\", JSON.stringify([]));\n    }\n  }, [appointments]);\n\n  //Funcion que tome las citas actuales y agregue las nuevas\n  const createAppointment = appointment => {\n    setAppointments([...appointments, appointment]);\n  };\n\n  //Función que elimina la cita segun el id\n  const deleteAppointment = id => {\n    const newAppointments = appointments.filter(\n      appointment => appointment.id !== id\n    );\n    setAppointments(newAppointments);\n  };\n  //Mensaje condicional\n  const title =\n    appointments.length === 0 ? \"No hay citas\" : \"Administra las citas\";\n  return (\n    <Fragment>\n      <div className=\"App\">\n        <h1>Administrador de pacientes</h1>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"one-half column\">\n              <Form createAppointment={createAppointment} />\n            </div>\n            <div className=\"one-half column\">\n              <h2>{title}</h2>\n              {appointments.map(appointment => (\n                <Appointment\n                  key={appointment.id}\n                  appointment={appointment}\n                  deleteAppointment={deleteAppointment}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}